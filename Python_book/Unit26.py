### 세트 사용하기

# 세트 만들기
# 세트는 {} 안에 값을 저장하며 각 값은, (콤마)로 구분해 줍니다.
# * 세트 = {값1, 값2, 값3}

fruits = {'mellon', 'watermellon', 'strawberry','blueberry'} # 세트는 요소 중복 안됨
fruits

# 특히 세트는 []로 요소출력 안됨

# 세트에 특정 값이 있는지 확인하기
'orange' in fruits
'mellon' not in fruits

# set를 사용하여 세트 만들기
# * set(반복가능한 객체)

set('the_game_of_throne') # 유일한 문자만 세트로 만듦
# {'_', 'a', 'e', 'f', 'g', 'h', 'm', 'n', 'o', 'r', 't'}

# 그리고 set(range(3)) 와같이 숫자를 만들어 내는 range를 사용하면 0-4까지 숫자를 가진 세트를 만들수 있슴
b = set(range(4))
b

# 빈세트
c = set()
c
# c= {}는 세트로 만들어지지 않음

# 한글세트도 가능
set('왕좌의 게임')

# 세트 안에 세트 안들어감

# 프로즌 세트 -> 내용변경 안되는 세트
d = frozenset(range(5)) # 집합연산 메서드에서 요소추가 삭제 연산 메서드 사용불가

# frozenset는 세트를 세트안에 넣고 싶을때 사용함.

## 집합연산 사용하기
# | 연산자는 합집합. union.
a = set(range(4))
b = set(range(7))
set.union(a, b)

# & 연산자는 교집합.
a & b
set.intersection(a,b)

# - 연산자는 차집합.
b - a
set.difference(b, a)  # 순서가 중요. 작은거에서 큰걸 빼면 아무것도 남지 않음

# ^ 연산자는 대칭차집합. XOR 대르면 참 겹치지 않는 요소만 구함.
a ^ b
set.symmetric_difference(a, b)

# 집합 연산 후 할당 연산자 사용하기
# |= 은 현재 세트에 다른 세트를 더하며 update메서드와 같다.
a |= {9}
a.update({15})  # 꼭 {} 형식의 세트를 올려줘야 한다.

# &= 현재 세트와 다른 세트중 겹치는 것만 저장
a &= b              #겹치는 것만 a에 저장
a.intersection_update({0, 1, 3, 7, 9})
# -= 는 현재 세트에서 다른 세트를 뺌
a -= {3}  # a = {0, 1}
a.difference_update({1})

# ^= 는 현제 세트와 다른 세트 중에서 겹치지 않는 요소만 현재 세트에 저장
c = set()
c ^= a
c.symmetric_difference_update({15, 17, 12, 11})

# 부분집합과 상위집합 확인하기
# <= 는 현재 세트가 다른 세트의 부분집합인지 확인
a >= b
a.issubset()

# < 은 현재 세트가 다른세트의 진 부분집합인지 확인. 메서드 없음
{1, 4, 5, 7} < a

# >= 현재 세트가 다른 세트의 상위 집합인지 확인
a >= {1, 4, 5, 7}
a.issubset({1, 4, 5})   # 현재세트.issuperset(다른세트)

# > 현재 세트가 다른 세트의 진상위진합인지 확인. 메서드 없음
a = {1, 2, 3, 4}   # 현재세트 > 다른세트
a > {1, 2, 3}

# 세트가 같은지 다른지 확인하기. ==
a == {1, 2, 3, 4}
a != {1, 2, 3, 4}     # != 다른지 확인.

# 세트가 겹치치 않는지 확인하기. disjoint
# 현재세트.isdisjoint(다른세트)


# 세트에 요소 추가하기
a.add(10)
a = set()
# 세트에 요소 삭제
a.remove(1)

# discard 는 세트에서 특정요소를 삭제하고 요소가 없으면 그냥 넘어감.
a.discard(10)

# 세트에서 임의의 요소 삭제하기
b.pop()

# 세트의 모든 요소 삭제
c.clear()

# 요소의 개수 구하기
len(b)

## 세트의 할당과 복사
d = a   # d와 a는 같은객체
d.add(13)  # 요소를 추가하면 두 세트에 모두 반영

# 완전히 다른 객체로 만드려면 copy
d = a.copy


## 반복문으로 세트의 요소를 모두 출력하기
# for 변수 in 세트:
  # 반복할 코드
b
for i in b:
    print(i)

# 세트 에서 요소를 꺼내서 i에 저장하고, 꺼낼 때마다 코드를 반복. 따라서 print 로 i 를
# 출력하면 요소를 모두 출력할 수 있습니다. 단, 세트의 요소는 순서가 없으므로 출력할 때마다 순서가
# 달라짐.(숫자는 숫자순으로 나옴)

# 물론 in 다음에 세트를 직접 지정해도 상관 없습니다.
for i in {1, 2, 3, 4}:
    print(i)

## 세트 표현식 사용하기
# 세트는 for 반복문과 if 조건문을 사용하여 세트를 생성할 수 있습니다.
# * {식 for 변수 in 반복가능한 객체}
# set(식 for 변수 in 반복가능한 객체)
a = {i for i in 'mellon'}

# 세트 표현식에 if 조건문 사용
# {식 for 변수 in 세트 if 조건문}
# set(식 for 변수 in 세트 if 조건식)
a = {i for i in 'pineapple' if i not in 'apl'}  # apl을 제외한 문자들로 세트 구성
# for 반복문 뒤에 if 조건문을 지정하면 if 조건문에서 특정 요소를 제외한 뒤 세트를 생성합니다.
